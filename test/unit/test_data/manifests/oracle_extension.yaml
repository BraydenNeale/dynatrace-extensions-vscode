name: com.dynatrace.extension.sql-oracle
version: <%=version%>
minDynatraceVersion: 1.280.0
minEECVersion: 1.275.0
author:
  name: Dynatrace

keywords:
  - "DATABASE"
  - "ORACLE"

dashboards:
  - path: "dashboards/dashboard.json"

alerts:
  - path: "alerts/alert_buffer_cache_hit_rate.json"
  - path: "alerts/alert_library_cache_hit_rate.json"
  - path: "alerts/alert_session_usage.json"
  - path: "alerts/alert_sorts_in_memory.json"
  - path: "alerts/alert_tablespace_used_memory.json"
  - path: "alerts/alert_asm_low_space.json"
  - path: "alerts/alert_failed_backup.json"

metrics:
  - key: func:com.dynatrace.extension.sql-oracle.memory.pga.usedForWorkAreas
    query:
      metricSelector: '(100) * (com.dynatrace.extension.sql-oracle.memory.pga.used) / (com.dynatrace.extension.sql-oracle.memory.pga.allocated)'
    metadata:
      tags:
        - Oracle
      displayName: PGA used for work areas
      description: Indicates what amount of allocated PGA memory is currently consumed by work areas. It can be used to determine how much memory is consumed by other consumers of the PGA memory (for example PL/SQL or Java)
      unit: Percent
  - key: func:com.dynatrace.extension.sql-oracle.memory.bufferCacheHitRatio
    query:
      metricSelector: '(100) * ((com.dynatrace.extension.sql-oracle.memory.sessionLogicalReads.count) - ((com.dynatrace.extension.sql-oracle.memory.physicalReads.count) - (com.dynatrace.extension.sql-oracle.memory.physicalReadsDirect.count))) / (com.dynatrace.extension.sql-oracle.memory.sessionLogicalReads.count)'
    metadata:
      tags:
        - Oracle
      displayName: Buffer cache hit ratio
      description: Represents the data block buffer cache efficiency, as the rate of the data blocks needed in memory
      unit: Percent
  - key: func:com.dynatrace.extension.sql-oracle.memory.sortsInMemory
    query:
      metricSelector: '(100) * (com.dynatrace.extension.sql-oracle.memory.memorySorts.count) / ((com.dynatrace.extension.sql-oracle.memory.memorySorts.count) + (com.dynatrace.extension.sql-oracle.memory.diskSorts.count))'
    metadata:
      tags:
        - Oracle
      displayName: Sorts in memory ratio
      description: Sorts (from ORDER BY clauses or index building) done in-memory
      unit: Percent
  - key: func:com.dynatrace.extension.sql-oracle.queries.other
    query:
      metricSelector: '(com.dynatrace.extension.sql-oracle.queries.dbTime.count) - (com.dynatrace.extension.sql-oracle.queries.plSqlExec.count) - (com.dynatrace.extension.sql-oracle.queries.sqlExec.count) - (com.dynatrace.extension.sql-oracle.queries.sqlParse.count)'
    metadata:
      tags:
        - Oracle
      displayName: Time spent on other activities
      description: Time spent on performing activites other than interpreting PL/SQL, parsing and executing SQL
      unit: MicroSecond
  - key: func:com.dynatrace.extension.sql-oracle.memory.pga.size.targetToLimitRatio
    query:
      metricSelector: '(com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget) / (com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit) * (100)'
    metadata:
      tags:
        - Oracle
      displayName: Target to limit ratio
      description: PGA target to limit ratio
      unit: Percent
  - key: func:com.dynatrace.extension.sql-oracle.sessions.totalSessionsToLimitRatio
    query:
      metricSelector: '(com.dynatrace.extension.sql-oracle.sessions.all) / (com.dynatrace.extension.sql-oracle.limits.sessions) * (100)'
    metadata:
      tags:
        - Oracle
      displayName: Sessions to limit ratio
      description: Total sessions count to limit ratio(initialization parameter)
      unit: Percent
  - key: com.dynatrace.extension.sql-oracle.cpu.cores
    metadata:
      tags:
        - Oracle
      displayName: CPU cores
      description: Number of CPU cores
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.cpu.backgroundTotal
    metadata:
      tags:
        - Oracle
      displayName: Background CPU usage (per second)
      description: CPU usage of background processes in centi seconds per second
      unit: Unspecified
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.cpu.foregroundTotal
    metadata:
      tags:
        - Oracle
      displayName: Foreground CPU usage (per second)
      description: CPU usage of foreground processes in centi seconds per second
      unit: Unspecified
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.io.bytesRead.count
    metadata:
      tags:
        - Oracle
      displayName: Physical bytes read
      description: Total size in bytes of disk reads by all database instance activity including application reads, backup, recovery, and other utilities
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.io.bytesWritten.count
    metadata:
      tags:
        - Oracle
      displayName: Physical bytes written
      description: Total size in bytes of all disk writes for the database instance including application activity, backup, recovery, and other utilities
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.io.wait.count
    metadata:
      tags:
        - Oracle
      displayName: Total wait time
      description: Total time spent in all wait states except for Idle class
      unit: MilliSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit
    metadata:
      tags:
        - Oracle
      displayName: PGA aggregate limit
      description: Limit on the aggregate PGA memory consumed by the instance
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget
    metadata:
      tags:
        - Oracle
      displayName: PGA aggregate target
      description: Target aggregate PGA memory available to all server processes attached to the instance
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.pga.used
    metadata:
      tags:
        - Oracle
      displayName: PGA memory used
      description: PGA memory consumed by work areas
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.pga.allocated
    metadata:
      tags:
        - Oracle
      displayName: Allocated PGA
      description: Current amount of PGA memory allocated by the instance
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.sga.cacheBuffer.sharedPoolFree
    metadata:
      tags:
        - Oracle
      displayName: Shared pool free
      description: Amount of free system global area (SGA) memory available in shared pool
      unit: Percent
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoLogSpaceWaitTime.count
    metadata:
      tags:
        - Oracle
      displayName: Redo log space wait time
      description: Total elapsed time of waiting for redo log space request
      unit: MilliSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoSizeIncrease.count
    metadata:
      tags:
        - Oracle
      displayName: Redo size increase
      description: Total amount of redo generated in bytes
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoWriteTime.count
    metadata:
      tags:
        - Oracle
      displayName: Redo write time
      description: Total elapsed time of the write from the redo log buffer to the current redo log file
      unit: MilliSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.sessionLogicalReads.count
    metadata:
      tags:
        - Oracle
      displayName: Logical reads
      description: The sum of "db block gets" plus "consistent gets"
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.physicalReads.count
    metadata:
      tags:
        - Oracle
      displayName: Physical reads
      description: Total number of data blocks read from disk
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.physicalReadsDirect.count
    metadata:
      tags:
        - Oracle
      displayName: Physical reads direct
      description: Number of reads directly from disk, bypassing the buffer cache
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.memorySorts.count
    metadata:
      tags:
        - Oracle
      displayName: Sorts in memory
      description: Number of sort operations that were performed completely in memory and did not require any disk writes
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.diskSorts.count
    metadata:
      tags:
        - Oracle
      displayName: Sorts on disk
      description: Number of sort operations that required at least one disk write
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.memory.libraryCacheHitRatio
    metadata:
      tags:
        - Oracle
      displayName: Library cache hit ratio
      description: Library cache hit ratio
      unit: Percent
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.queries.connectionManagement.count
    metadata:
      tags:
        - Oracle
      displayName: Connection management time
      description: Time spent on performing session connect and disconnect calls
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.queries.plSqlExec.count
    metadata:
      tags:
        - Oracle
      displayName: PL SQL exec time
      description: Time spent on running the PL/SQL interpreter
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.queries.sqlExec.count
    metadata:
      tags:
        - Oracle
      displayName: SQL exec time
      description: Time spent on executing SQL
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.queries.sqlParse.count
    metadata:
      tags:
        - Oracle
      displayName: SQL parse time
      description: Time spent on parsing SQL
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.queries.dbTime.count
    metadata:
      tags:
        - Oracle
      displayName: DB Time
      description: Time spent on performing Database user-level calls
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.queries.cpuTime.count
    metadata:
      tags:
        - Oracle
      displayName: DB CPU
      description: CPU time spent on performing database user-level calls
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.sessions.active
    metadata:
      tags:
        - Oracle
      displayName: Active Sessions
      description: Active sessions count
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.sessions.all
    metadata:
      tags:
        - Oracle
      displayName: Total sessions
      description: Total sessions count
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.sessions.userCalls.count
    metadata:
      tags:
        - Oracle
      displayName: User calls
      description: Total number of logins, parses, or execute calls
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.limits.sessions
    metadata:
      tags:
        - Oracle
      displayName: Sessions limit
      description: Sessions initialization parameter limit
      unit: Unspecified
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.limits.processes
    metadata:
      tags:
        - Oracle
      displayName: Processes limit
      description: Processes initialization parameter limit
      unit: Unspecified
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.wait.count
    metadata:
      tags:
        - Oracle
      displayName: Number of wait events
      description: Total number of waits for the event
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.wait.time.count
    metadata:
      tags:
        - Oracle
      displayName: Seconds waited
      description: Total amount of time waited for the event
      unit: MicroSecond
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.tablespaces.totalSpace
    metadata:
      tags:
        - Oracle
      displayName: Total space
      description: Total size of tablespace
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.tablespaces.freeSpace
    metadata:
      tags:
        - Oracle
      displayName: Free space
      description: Free space in tablespace
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.tablespaces.usedSpace
    metadata:
      tags:
        - Oracle
      displayName: Used space
      description: Used space in tablespace
      unit: Byte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.tablespaces.usedSpaceRatio
    metadata:
      tags:
        - Oracle
      displayName: Used space ratio
      description: Used space ratio
      unit: Percent
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.tablespaces.freeSpaceRatio
    metadata:
      tags:
        - Oracle
      displayName: Free space ratio
      description: Free space ratio
      unit: Percent
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
  - key: com.dynatrace.extension.sql-oracle.asm.free_mb
    metadata:
      tags:
        - Oracle
      displayName: ASM - Free space
      description: Free disk space available on this Oracle ASM Disk
      unit: MegaByte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_asm_disk
  - key: com.dynatrace.extension.sql-oracle.asm.total_mb
    metadata:
      tags:
        - Oracle
      displayName: ASM - Total space
      description: Total disk space available on this Oracle ASM Disk
      unit: MegaByte
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_asm_disk
  - key: com.dynatrace.extension.sql-oracle.asm.used_pct
    metadata:
      tags:
        - Oracle
      displayName: ASM - Used space
      description: Percentage of disk space used on this Oracle ASM Disk
      unit: Percent
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_asm_disk
  - key: com.dynatrace.extension.sql-oracle.asm.reads.count
    metadata:
      tags:
        - Oracle
      displayName: ASM - Reads
      description: Number of reads from this Oracle ASM Disk
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_asm_disk
  - key: com.dynatrace.extension.sql-oracle.asm.writes.count
    metadata:
      tags:
        - Oracle
      displayName: ASM - Writes
      description: Number of writes to this Oracle ASM Disk
      unit: Count
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_asm_disk
  - key: com.dynatrace.extension.sql-oracle.status
    metadata:
      tags:
        - Oracle
      displayName: Instance status
      unit: State
      description: A state metric representing the details of the connected Oracle instance.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
      dimensions:
        - key: status
          displayName: Instance Status
        - key: parallel
          displayName: Parallel
        - key: logins
          displayName: Logins
        - key: instance.role
          displayName: Instance Role
        - key: db.status
          displayName: Database Status
        - key: active_state
          displayName: Active State
        - key: instance.mode
          displayName: Instance Mode
        - key: archiver
          displayName: Archiver
        - key: shutdown_pending
          displayName: Shutdown Pending
  - key: com.dynatrace.extension.sql-oracle.db_status
    metadata:
      tags:
        - Oracle
      displayName: Database status
      description: A state metric representing details of the connected Oracle database.
      unit: State
      dimensions:
        - key: instance.log_mode
          displayName: Log mode
        - key: instance.open_mode
          displayName: Open mode
        - key: instance.db_role
          displayName: Database role
        - key: instance.flashback
          displayName: Flashback
  - key: com.dynatrace.extension.sql-oracle.backup-input_bytes
    metadata:
      tags:
        - Oracle
      displayName: Input bytes
      unit: Byte
      description: Sum of all input file sizes backed up.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: session_recid
          displayName: Session Recid
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup-output_bytes
    metadata:
      tags:
        - Oracle
      displayName: Output bytes
      unit: Byte
      description: Output size of all pieces generated.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: session_recid
          displayName: Session Recid
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup-elapsed_seconds
    metadata:
      tags:
        - Oracle
      displayName: Elapsed seconds
      unit: Second
      description: Number of elapsed seconds.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: session_recid
          displayName: Session Recid
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup-compression_ratio
    metadata:
      tags:
        - Oracle
      displayName: Compression ratio
      unit: Percent
      description: Compression ratio.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: session_recid
          displayName: Session Recid
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup-input_bytes_per_second
    metadata:
      tags:
        - Oracle
      displayName: Input bytes per second
      unit: BytePerSecond
      description: Input read-rate-per-second.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: session_recid
          displayName: Session Recid
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup-output_bytes_per_second
    metadata:
      tags:
        - Oracle
      displayName: Output bytes per second
      unit: BytePerSecond
      description: Output write-rate-per-second.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: session_recid
          displayName: Session Recid
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup-autobackup_count_number
    metadata:
      tags:
        - Oracle
      displayName: Auto - backup count
      unit: Count
      description: Number of autobackups performed by this job.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup.state
    metadata:
      tags:
        - Oracle
      displayName: Backup state
      unit: State
      description: A state metric representing the details of a Backup Job.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      dimensions:
        - key: start_time
          displayName: Start Time
        - key: end_time
          displayName: End Time
        - key: backup_status
          displayName: Backup Status
        - key: input_type
          displayName: Input Type
        - key: autobackup_done
          displayName: Auto-Backup Done
        - key: optimized
          displayName: Optimized
  - key: com.dynatrace.extension.sql-oracle.backup.time_since
    metadata:
      tags:
        - Oracle
      displayName: Time since last backup
      unit: Minute
      description: The time elapsed since the last backup completed successfully.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_instance
      dimensions:
        - key: backup.type
          displayName: Backup type
  - key: com.dynatrace.extension.sql-oracle.pdb-total_size
    metadata:
      tags:
        - Oracle
      displayName: Total size
      unit: Count
      description: Shows the disk space (in bytes) used by the PDB, including both data and temp files.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time
  - key: com.dynatrace.extension.sql-oracle.pdb-block_size
    metadata:
      tags:
        - Oracle
      displayName: Block size
      unit: Count
      description: The current block size for the PDB
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time
  - key: com.dynatrace.extension.sql-oracle.pdb-diagnostic_size
    metadata:
      tags:
        - Oracle
      displayName: Diagnostic size
      unit: Count
      description: Shows the current disk space usage (in bytes) of the diagnostic traces generated in the PDB.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time
  - key: com.dynatrace.extension.sql-oracle.pdb-audit_files_size
    metadata:
      tags:
        - Oracle
      displayName: Audit files size
      unit: Count
      description: Shows the current disk space usage (in bytes) by Unified Audit files (.bin format) in the current PDB.
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time
  - key: com.dynatrace.extension.sql-oracle.pdb-max_size
    metadata:
      tags:
        - Oracle
      displayName: Max size
      unit: Count
      description: Shows the maximum amount of disk space (in bytes) that can  be used by data and temp files in the PDB
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time
  - key: com.dynatrace.extension.sql-oracle.pdb-max_diagnostic_size
    metadata:
      tags:
        - Oracle
      displayName: Max diagnostic size
      unit: Count
      description: Shows the maximum amount of disk space (in bytes) that can be used by diagnostic traces generated in the PDB
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time
  - key: com.dynatrace.extension.sql-oracle.pdb-max_audit_size
    metadata:
      tags:
        - Oracle
      displayName: Max audit size
      unit: Count
      description: Shows the maximum amount of disk space (in bytes) that can be used by Unified Audit files (.bin format) in the PDB
      sourceEntityType: sql:com_dynatrace_extension_sql-oracle_database
      dimensions:
        - key: pdb_open_mode
          displayName: Open Mode
        - key: pdb_restricted
          displayName: Restricted
        - key: pdb_last_changed_by
          displayName: Last Changed By
        - key: pdb_open_time
          displayName: Open Time

vars:
  - id: long-running-query-timeout
    displayName: Heavy query timeout
    description: "Default is 10 seconds. Requires ActiveGate 1.275 or newer."
    type: text

sqlOracle:
  - group: CPU
    featureSet: cpu
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
    subgroups:
      - subgroup: Cores
        query:
          SELECT value AS cpu_count
          FROM v$parameter
          WHERE name = 'cpu_count'
        metrics:
          - key: com.dynatrace.extension.sql-oracle.cpu.cores
            value: col:cpu_count
            type: gauge
      - subgroup: CPU Usage
        query: >
          SELECT
                DECODE(metric_name, 'Background CPU Usage Per Sec', v$metric.value) AS background_cpu_usage,
                DECODE(metric_name, 'CPU Usage Per Sec', v$metric.value) AS foreground_cpu_usage
          FROM v$metric, v$metricgroup
          WHERE v$metric.group_id = v$metricgroup.group_id
            AND v$metric.metric_name IN ('Background CPU Usage Per Sec', 'CPU Usage Per Sec')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.cpu.backgroundTotal
            value: col:background_cpu_usage
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.cpu.foregroundTotal
            value: col:foreground_cpu_usage
            type: gauge
  - group: Memory
    featureSet: memory
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
    subgroups:
      - subgroup: PGA Size
        featureSet: memory
        query: >
          SELECT
                DECODE(name, 'pga_aggregate_limit', value) AS pga_aggregate_limit,
                DECODE(name, 'pga_aggregate_target', value) AS pga_aggregate_target
          FROM v$parameter
          WHERE name IN ('pga_aggregate_limit', 'pga_aggregate_target')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit
            value: col:pga_aggregate_limit
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget
            value: col:pga_aggregate_target
            type: gauge
      - subgroup: PGA Usage
        query: >
          SELECT
                DECODE(name,'total PGA inuse', value) AS total_pga_in_use,
                DECODE(name,'total PGA allocated', value) AS total_pga_allocated
          FROM v$pgastat
          WHERE name IN ('total PGA inuse', 'total PGA allocated')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.memory.pga.used
            value: col:total_pga_in_use
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.memory.pga.allocated
            value: col:total_pga_allocated
            type: gauge
      - subgroup: Shared Pool Free
        query: >
          SELECT SUM(DECODE(name, 'free memory', bytes)) / SUM(bytes) * 100 AS shared_pool_free FROM v$sgastat WHERE pool = 'shared pool'
        metrics:
          - key: com.dynatrace.extension.sql-oracle.memory.sga.cacheBuffer.sharedPoolFree
            value: col:shared_pool_free
            type: gauge
      - subgroup: Redo
        query: >
          SELECT
                DECODE(name, 'redo log space wait time', value) * 10 AS redo_log_space_wait_time,
                DECODE(name, 'redo size', value)                AS redo_size,
                DECODE(name, 'redo write time', value) * 10     AS redo_write_time,
                DECODE(name, 'session logical reads', value)    AS session_logical_reads,
                DECODE(name, 'physical reads', value)           AS physical_reads,
                DECODE(name, 'physical reads direct', value)    AS physical_reads_direct,
                DECODE(name, 'sorts (memory)', value)           AS memory_sorts,
                DECODE(name, 'sorts (disk)', value)             AS disk_sorts
          FROM v$sysstat
          WHERE name IN ('redo log space wait time', 'redo size', 'redo write time',
                        'session logical reads', 'physical reads', 'physical reads direct',
                        'sorts (memory)', 'sorts (disk)')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoLogSpaceWaitTime.count
            value: col:redo_log_space_wait_time
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoSizeIncrease.count
            value: col:redo_size
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoWriteTime.count
            value: col:redo_write_time
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.sessionLogicalReads.count
            value: col:session_logical_reads
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.physicalReads.count
            value: col:physical_reads
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.physicalReadsDirect.count
            value: col:physical_reads_direct
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.memorySorts.count
            value: col:memory_sorts
            type: count
          - key: com.dynatrace.extension.sql-oracle.memory.diskSorts.count
            value: col:disk_sorts
            type: count
      - subgroup: Library Cache Hit Ratio
        query: >
          SELECT
                ROUND(1 - SUM(RELOADS) / SUM(PINS), 4) * 100 AS cache_hit_ratio
          FROM V$LIBRARYCACHE
        metrics:
          - key: com.dynatrace.extension.sql-oracle.memory.libraryCacheHitRatio
            value: col:cache_hit_ratio
            type: gauge
  - group: ASM
    featureSet: asm
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
    subgroups:
      - subgroup: ASM
        query: >
          SELECT NAME,
            free_mb,
            total_mb,
            100 - (free_mb / total_mb * 100) AS used_pct,
            reads,
            writes
          FROM V$ASM_DISK_STAT
        timeout: var:long-running-query-timeout
        metrics:
          - key: com.dynatrace.extension.sql-oracle.asm.free_mb
            value: col:free_mb
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.asm.total_mb
            value: col:total_mb
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.asm.used_pct
            value: col:used_pct
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.asm.reads.count
            value: col:reads
            type: count
          - key: com.dynatrace.extension.sql-oracle.asm.writes.count
            value: col:writes
            type: count
        dimensions:
          - key: name
            value: col:name
  - group: Database
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
    subgroups:
      - subgroup: Instance status
        query: >
          SELECT
            STATUS,
            PARALLEL,
            LOGINS,
            INSTANCE_ROLE,
            DATABASE_STATUS,
            ACTIVE_STATE,
            INSTANCE_MODE,
            ARCHIVER,
            SHUTDOWN_PENDING
          FROM v$instance
        dimensions:
          - key: status
            value: col:STATUS
          - key: parallel
            value: col:PARALLEL
          - key: logins
            value: col:LOGINS
          - key: instance.role
            value: col:INSTANCE_ROLE
          - key: db.status
            value: col:DATABASE_STATUS
          - key: active_state
            value: col:ACTIVE_STATE
          - key: instance.mode
            value: col:INSTANCE_MODE
          - key: archiver
            value: col:ARCHIVER
          - key: shutdown_pending
            value: col:SHUTDOWN_PENDING
        metrics:
          - key: com.dynatrace.extension.sql-oracle.status
            value: const:1
      - subgroup: Database status
        query: |
          SELECT LOG_MODE, OPEN_MODE, DATABASE_ROLE, FLASHBACK_ON FROM V$DATABASE
        dimensions:
          - key: instance.log_mode
            value: col:LOG_MODE
          - key: instance.open_mode
            value: col:OPEN_MODE
          - key: instance.db_role
            value: col:DATABASE_ROLE
          - key: instance.flashback
            value: col:FLASHBACK_ON
        metrics:
          - key: com.dynatrace.extension.sql-oracle.db_status
            value: const:1
      - subgroup: IO Physical bytes
        featureSet: io
        query: >
          SELECT
                DECODE(name, 'physical read total bytes', value) AS bytes_written,
                DECODE(name, 'physical write total bytes', value) AS bytes_read
          FROM v$sysstat
          WHERE name IN ('physical read total bytes', 'physical write total bytes')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.io.bytesRead.count
            value: col:bytes_read
            type: count
          - key: com.dynatrace.extension.sql-oracle.io.bytesWritten.count
            value: col:bytes_written
            type: count
      - subgroup: IO Wait time
        featureSet: io
        query: >
          SELECT SUM(time_waited) * 10 AS totalWaitTime
          FROM v$system_wait_class
          WHERE wait_class <> 'Idle'
        metrics:
          - key: com.dynatrace.extension.sql-oracle.io.wait.count
            value: col:totalWaitTime
            type: count
      - subgroup: Sessions
        featureSet: sessions
        query: >
          SELECT SUM(CASE
                        WHEN status = 'ACTIVE' AND wait_class <> 'Idle'
                            THEN 1
                        ELSE 0 END) AS active_sessions,
                COUNT(*)            AS all_sessions
          FROM v$session
        metrics:
          - key: com.dynatrace.extension.sql-oracle.sessions.active
            value: col:active_sessions
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.sessions.all
            value: col:all_sessions
            type: gauge
      - subgroup: User calls
        featureSet: sessions
        query: >
          SELECT value AS user_calls FROM v$sysstat WHERE name = 'user calls'
        metrics:
          - key: com.dynatrace.extension.sql-oracle.sessions.userCalls.count
            value: col:user_calls
            type: count
      - subgroup: Limits
        featureSet: limits
        query: >
          SELECT
                  DECODE(name, 'sessions', value) AS sessions_limit,
                  DECODE(name, 'processes', value) AS processes_limit
          FROM v$parameter
          WHERE name IN('sessions', 'processes')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.limits.sessions
            value: col:sessions_limit
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.limits.processes
            value: col:processes_limit
            type: gauge
      - subgroup: Wait Events
        featureSet: waitEvents
        query: >
          SELECT total_waits, time_waited_micro, event, wait_class
          FROM v$system_event
        metrics:
          - key: com.dynatrace.extension.sql-oracle.wait.count
            value: col:total_waits
            type: count
          - key: com.dynatrace.extension.sql-oracle.wait.time.count
            value: col:time_waited_micro
            type: count
        dimensions:
          - key: event
            value: col:event
          - key: wait_class
            value: col:wait_class
      - subgroup: Tablespaces
        interval:
          minutes: 5
        featureSet: tablespaces
        query: >
          WITH getsize AS (
              SELECT tablespace_name,
                    max(autoextensible) autoextensible,
                    SUM(bytes)          tsize
              FROM dba_data_files
              GROUP BY tablespace_name),
              getfree AS (
                  SELECT a.tablespace_name,
                          contents,
                          SUM(blocks * block_size) tfree
                  FROM dba_free_space a,
                        dba_tablespaces c
                  WHERE a.tablespace_name = c.tablespace_name
                  GROUP BY a.tablespace_name, contents)
          SELECT a.tablespace_name,
                b.contents,
                a.tsize,
                b.tfree,
                a.tsize - b.tfree AS tused,
                100 * ((a.tsize - b.tfree) / a.tsize) AS tused_ratio,
                100 * (b.tfree / a.tsize) AS tfree_ratio,
                a.autoextensible AS autoextend
          FROM getsize a,
              getfree b
          WHERE a.tablespace_name = b.tablespace_name
          UNION
          SELECT tablespace_name,
                'TEMPORARY',
                SUM(tablespace_size) AS tsize,
                SUM(free_space) AS tfree,
                SUM(tablespace_size) - SUM(free_space) AS tused,
                100 * ((SUM(tablespace_size) - SUM(free_space)) / SUM(tablespace_size)) AS tused_ratio,
                100 * (SUM(free_space) / SUM(tablespace_size)) AS tfree_ratio,
                'NO'
          FROM dba_temp_free_space
          GROUP BY tablespace_name
        timeout: var:long-running-query-timeout
        metrics:
          - key: com.dynatrace.extension.sql-oracle.tablespaces.totalSpace
            value: col:tsize
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.tablespaces.freeSpace
            value: col:tfree
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.tablespaces.usedSpace
            value: col:tused
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.tablespaces.usedSpaceRatio
            value: col:tused_ratio
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.tablespaces.freeSpaceRatio
            value: col:tfree_ratio
            type: gauge
        dimensions:
          - key: tablespace
            value: col:tablespace_name
  - group: Backups
    featureSet: backupJob
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
    subgroups:
      - subgroup: Backup Jobs
        query: >
          SELECT
              backup_job.SESSION_RECID,
              backup_job.SESSION_STAMP,
              backup_job.START_TIME,
              backup_job.END_TIME,
              backup_job.STATUS,
              backup_job.INPUT_TYPE,
              backup_job.ELAPSED_SECONDS,
              (backup_job.COMPRESSION_RATIO * 100) COMPRESSION_RATIO,
              backup_job.INPUT_BYTES_PER_SEC,
              backup_job.OUTPUT_BYTES_PER_SEC,
              backup_job.AUTOBACKUP_DONE,
              backup_job.OPTIMIZED,
              backup_job.AUTOBACKUP_COUNT,
              CASE
                  WHEN COUNT(DISTINCT backup_set.BACKUP_TYPE) > 0 THEN LISTAGG(DISTINCT backup_set.BACKUP_TYPE, '+') WITHIN GROUP (ORDER BY backup_set.BACKUP_TYPE)
                  ELSE 'N/A'
              END AS BACKUP_TYPES,
              CASE
                  WHEN (
                      INSTR(LISTAGG(DISTINCT backup_set.BACKUP_TYPE, '+'), 'D') > 0 AND
                      COALESCE(MAX(backup_set.INCREMENTAL_LEVEL), 0) = 0
                  ) THEN 'FULL'
                  WHEN (
                      INSTR(LISTAGG(DISTINCT backup_set.BACKUP_TYPE, '+'), 'D') > 0 AND
                      MAX(backup_set.INCREMENTAL_LEVEL) = 1
                  ) THEN 'INCREMENTAL'
                  ELSE 'NO'
              END AS DATAFILES_INCLUDED,
              CASE
                  WHEN INSTR(LISTAGG(DISTINCT backup_set.BACKUP_TYPE, '+'), 'L') > 0 THEN 'YES'
                  ELSE 'NO'
              END AS REDO_LOGS_INCLUDED,
              CASE
                  WHEN MAX(CASE WHEN backup_set.CONTROLFILE_INCLUDED = 'YES' THEN 1 ELSE 0 END) > 0 THEN 'YES'
                  ELSE 'NO'
              END AS CONTROLFILE_INCLUDED,
              CASE
                  WHEN MAX(CASE WHEN backup_set.INCREMENTAL_LEVEL = 0 THEN 1 WHEN backup_set.INCREMENTAL_LEVEL = 1 THEN 2 ELSE 0 END) = 1 THEN '0'
                  WHEN MAX(CASE WHEN backup_set.INCREMENTAL_LEVEL = 0 THEN 1 WHEN backup_set.INCREMENTAL_LEVEL = 1 THEN 2 ELSE 0 END) = 2 THEN '1'
                  ELSE 'N/A'
              END AS INCREMENTAL_LEVEL
          FROM V$RMAN_BACKUP_JOB_DETAILS backup_job
          LEFT JOIN V$BACKUP_SET_DETAILS backup_set
              ON backup_job.SESSION_RECID = backup_set.SESSION_RECID AND backup_job.SESSION_STAMP = backup_set.SESSION_STAMP
          WHERE (
              (
                  backup_job.END_TIME >= CURRENT_TIMESTAMP - NUMTODSINTERVAL(5, 'MINUTE')
                  OR
                  (backup_job.END_TIME IS NULL AND backup_job.START_TIME >= CURRENT_TIMESTAMP - NUMTODSINTERVAL(60, 'MINUTE'))
              )
              AND backup_job.STATUS NOT LIKE 'RUNNING%'
          )
          GROUP BY
              backup_job.SESSION_RECID,
              backup_job.SESSION_STAMP,
              backup_job.START_TIME,
              backup_job.END_TIME,
              backup_job.STATUS,
              backup_job.INPUT_TYPE,
              backup_job.ELAPSED_SECONDS,
              backup_job.COMPRESSION_RATIO,
              backup_job.INPUT_BYTES_PER_SEC,
              backup_job.OUTPUT_BYTES_PER_SEC,
              backup_job.AUTOBACKUP_DONE,
              backup_job.OPTIMIZED,
              backup_job.AUTOBACKUP_COUNT
          ORDER BY backup_job.SESSION_STAMP DESC
        dimensions:
          - key: session_recid
            value: col:SESSION_RECID
          - key: session_stamp
            value: col:SESSION_STAMP
          - key: start_time
            value: col:START_TIME
          - key: end_time
            value: col:END_TIME
          - key: backup_status
            value: col:STATUS
          - key: input_type
            value: col:INPUT_TYPE
          - key: autobackup_done
            value: col:AUTOBACKUP_DONE
          - key: optimized
            value: col:OPTIMIZED
          - key: backup_types
            value: col:BACKUP_TYPES
          - key: datafiles_included
            value: col:DATAFILES_INCLUDED
          - key: redo_logs_included
            value: col:REDO_LOGS_INCLUDED
          - key: controlfile_included
            value: col:CONTROLFILE_INCLUDED
          - key: incremental_level
            value: col:INCREMENTAL_LEVEL
        metrics:
          - key: com.dynatrace.extension.sql-oracle.backup-input_bytes
            value: col:INPUT_BYTES
          - key: com.dynatrace.extension.sql-oracle.backup-output_bytes
            value: col:OUTPUT_BYTES
          - key: com.dynatrace.extension.sql-oracle.backup-elapsed_seconds
            value: col:ELAPSED_SECONDS
          - key: com.dynatrace.extension.sql-oracle.backup-compression_ratio
            value: col:COMPRESSION_RATIO
          - key: com.dynatrace.extension.sql-oracle.backup-input_bytes_per_second
            value: col:INPUT_BYTES_PER_SEC
          - key: com.dynatrace.extension.sql-oracle.backup-output_bytes_per_second
            value: col:OUTPUT_BYTES_PER_SEC
          - key: com.dynatrace.extension.sql-oracle.backup-autobackup_count_number
            value: col:AUTOBACKUP_COUNT
            type: gauge
          - key: com.dynatrace.extension.sql-oracle.backup.state
            value: const:1
      - subgroup: Time since last backup
        query: >
          SELECT
              ranked.DETAILED_TYPE,
              ranked.MINUTES_SINCE
          FROM (
              SELECT
                  agg.DETAILED_TYPE,
                  agg.MINUTES_SINCE,
                  ROW_NUMBER() OVER(PARTITION BY agg.DETAILED_TYPE ORDER BY NULL) RN
              FROM (
                  SELECT
                      CASE
                          WHEN INSTR(LISTAGG(DISTINCT B_SET.BACKUP_TYPE, '+'), 'D') > 0 THEN
                              (CASE
                                  WHEN COALESCE(MAX(B_SET.INCREMENTAL_LEVEL), 0) = 0 THEN 'INCREMENTAL 0'
                                  WHEN MAX(B_SET.INCREMENTAL_LEVEL) = 1 THEN 'INCREMENTAL 1'
                                  ELSE 'FULL'
                              END)
                          WHEN INSTR(LISTAGG(DISTINCT B_SET.BACKUP_TYPE, '+'), 'L') > 0 THEN 'REDO LOGS'
                          ELSE 'OTHER'
                      END DETAILED_TYPE,
                      ROUND((SYSDATE - B_JOB.END_TIME) * 1440) "MINUTES_SINCE"
                  FROM V$RMAN_BACKUP_JOB_DETAILS B_JOB
                  LEFT OUTER JOIN V$BACKUP_SET_DETAILS B_SET
                    ON B_JOB.SESSION_RECID = B_SET.SESSION_RECID AND B_JOB.SESSION_STAMP = B_SET.SESSION_STAMP
                  WHERE B_JOB.STATUS = 'COMPLETED'
                  GROUP BY
                    B_JOB.SESSION_STAMP,
                    ROUND((SYSDATE - B_JOB.END_TIME) * 1440)
                  ORDER BY B_JOB.SESSION_STAMP DESC
                  ) agg
              ) ranked
          WHERE RN = 1 AND DETAILED_TYPE != 'OTHER'
          ORDER BY MINUTES_SINCE ASC
        dimensions:
          - key: backup.type
            value: col:DETAILED_TYPE
        metrics:
          - key: com.dynatrace.extension.sql-oracle.backup.time_since
            value: col:MINUTES_SINCE
  - group: Queries
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
    subgroups:
      - subgroup: Query performance
        featureSet: queryPerformance
        query: >
          SELECT
                DECODE(stat_name, 'connection management call elapsed time', value) AS conn_management_call_time,
                DECODE(stat_name, 'PL/SQL execution elapsed time', value)           AS pl_sql_execution_elapsed_time,
                DECODE(stat_name, 'sql execute elapsed time', value)                AS sql_execute_elapsed_time,
                DECODE(stat_name, 'parse time elapsed', value)                      AS parse_time_elapsed,
                DECODE(stat_name, 'DB time', value)                                 AS db_time,
                DECODE(stat_name, 'DB CPU', value)                                  AS cpu_time
          FROM v$sys_time_model
          WHERE stat_name IN ('connection management call elapsed time',
                              'PL/SQL execution elapsed time', 'sql execute elapsed time',
                              'parse time elapsed', 'DB time', 'DB CPU')
        metrics:
          - key: com.dynatrace.extension.sql-oracle.queries.connectionManagement.count
            value: col:conn_management_call_time
            type: count
          - key: com.dynatrace.extension.sql-oracle.queries.plSqlExec.count
            value: col:pl_sql_execution_elapsed_time
            type: count
          - key: com.dynatrace.extension.sql-oracle.queries.sqlExec.count
            value: col:sql_execute_elapsed_time
            type: count
          - key: com.dynatrace.extension.sql-oracle.queries.sqlParse.count
            value: col:parse_time_elapsed
            type: count
          - key: com.dynatrace.extension.sql-oracle.queries.dbTime.count
            value: col:db_time
            type: count
          - key: com.dynatrace.extension.sql-oracle.queries.cpuTime.count
            value: col:cpu_time
            type: count
      - subgroup: topN Queries
        interval:
          minutes: 5
        featureSet: TopN
        ingest: log
        query: >
          SELECT sqlarea.sql_id,
                sqlarea.elapsed_time,
                sqlarea.cpu_time,
                sqlarea.sql_fulltext,
                sqlarea.parsing_schema_name,
                sqlarea.disk_reads,
                sqlarea.direct_writes,
                sqlarea.executions,
                sqlarea.parse_calls,
                sqlarea.buffer_gets,
                sqlarea.rows_processed,
                sqlarea.user_io_wait_time,
                sqlarea.cluster_wait_time,
                sqlarea.concurrency_wait_time,
                sqlarea.application_wait_time,
                sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME
          FROM v$sqlarea sqlarea
                  JOIN (SELECT sql_id, current_con_id
                        FROM (SELECT area.sql_id, current_con_id
                              FROM v$sqlarea area
                                        JOIN (SELECT SYS_CONTEXT('USERENV', 'CON_ID') as current_con_id from DUAL)
                                            ON area.con_id = current_con_id
                              WHERE (area.last_active_time >= (SYSDATE - NUMTODSINTERVAL(300, 'SECOND'))
                                  OR (area.last_active_time IS NULL
                                      AND area.last_load_time >= (SYSDATE - NUMTODSINTERVAL(300, 'SECOND'))))
                              ORDER BY elapsed_time DESC)
                        WHERE rownum <= 100) sqlarea_int
                        ON sqlarea.sql_id = sqlarea_int.sql_id AND sqlarea.con_id = current_con_id
        timeout: var:long-running-query-timeout
        attributes:
          - key: instance.name
            value: col:INSTANCE_NAME
          - key: schema
            value: col:PARSING_SCHEMA_NAME
          - key: sql_id
            value: col:SQL_ID
          - key: content
            value: col:sql_fulltext
          - key: event.group
            value: const:query_performance
          - key: cpu_time
            value: col:cpu_time
            type: rate
          - key: elapsed_time
            value: col:elapsed_time
            type: rate
          - key: disk_reads
            value: col:disk_reads
            type: rate
          - key: buffer_gets
            value: col:buffer_gets
            type: rate
          - key: user_io_wait_time
            value: col:user_io_wait_time
            type: rate
          - key: cluster_wait_time
            value: col:cluster_wait_time
            type: rate
          - key: concurrency_wait_time
            value: col:concurrency_wait_time
            type: rate
          - key: application_wait_time
            value: col:application_wait_time
            type: rate
          - key: executions
            value: col:executions
            type: rate
          - key: direct_writes
            value: col:direct_writes
            type: rate
          - key: rows_processed
            value: col:rows_processed
            type: rate
          - key: parse_calls
            value: col:parse_calls
            type: rate
  - group: Multitenancy
    featureSet: multitenancy
    query: >
      SELECT
          sys_context('USERENV', 'SERVER_HOST') as SERVER_HOST,
          sys_context('USERENV', 'INSTANCE_NAME') as INSTANCE_NAME,
          sys_context('USERENV', 'CDB_NAME') as CDB_NAME,
          sys_context('USERENV', 'DB_NAME') as PDB_NAME,
          sys_context('USERENV', 'SERVICE_NAME') as SERVICE_NAME
      FROM dual
    dimensions:
      - key: instance.host
        value: col:SERVER_HOST
      - key: instance.name
        value: col:INSTANCE_NAME
      - key: cdb.name
        value: col:CDB_NAME
      - key: pdb.name
        value: col:PDB_NAME
      - key: service.name
        value: col:SERVICE_NAME
    subgroups:
      - subgroup: PDB Details
        query: |
          SELECT NAME, OPEN_MODE, RESTRICTED, LAST_CHANGED_BY, cast(OPEN_TIME as date) as OPEN_TIME_CASTED, TOTAL_SIZE, BLOCK_SIZE, DIAGNOSTICS_SIZE, AUDIT_FILES_SIZE, MAX_SIZE, MAX_DIAGNOSTICS_SIZE, MAX_AUDIT_SIZE FROM V$PDBS
        metrics:
          - key: com.dynatrace.extension.sql-oracle.pdb-total_size
            value: col:TOTAL_SIZE
          - key: com.dynatrace.extension.sql-oracle.pdb-block_size
            value: col:BLOCK_SIZE
          - key: com.dynatrace.extension.sql-oracle.pdb-diagnostic_size
            value: col:DIAGNOSTICS_SIZE
          - key: com.dynatrace.extension.sql-oracle.pdb-audit_files_size
            value: col:AUDIT_FILES_SIZE
          - key: com.dynatrace.extension.sql-oracle.pdb-max_size
            value: col:MAX_SIZE
          - key: com.dynatrace.extension.sql-oracle.pdb-max_diagnostic_size
            value: col:MAX_DIAGNOSTICS_SIZE
          - key: com.dynatrace.extension.sql-oracle.pdb-max_audit_size
            value: col:MAX_AUDIT_SIZE
        dimensions:
          - key: pdb.name
            value: col:NAME
          - key: pdb_open_mode
            value: col:OPEN_MODE
          - key: pdb_restricted
            value: col:RESTRICTED
          - key: pdb_last_changed_by
            value: col:LAST_CHANGED_BY
          - key: pdb_open_time
            value: col:OPEN_TIME_CASTED

topology:
  types:
    - name: sql:com_dynatrace_extension_sql-oracle_backup_job
      displayName: Oracle DB backup job
      enabled: true
      rules:
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}_{session_recid}_{session_stamp}
          instanceNamePattern: "{input_type} backup on {instance.name}"
          iconPattern: backup
          sources:
            - sourceType: Metrics
              condition: $prefix(com.dynatrace.extension.sql-oracle.backup)
          attributes:
            - pattern: '{start_time}'
              key: start_time
              displayName: Start time
            - pattern: '{end_time}'
              key: end_time
              displayName: End time
            - pattern: '{backup_status}'
              key: backup_status
              displayName: Backup Status
            - pattern: '{input_type}'
              key: input_type
              displayName: Input Type
            - pattern: '{autobackup_done}'
              key: autobackup_done
              displayName: Auto-Backup Done
            - pattern: '{optimized}'
              key: optimized
              displayName: Optimized
            - key: backup_types
              pattern: '{backup_types}'
              displayName: Backup types
            - key: datafiles_included
              pattern: '{datafiles_included}'
              displayName: Datafiles included
            - key: redo_logs_included
              pattern: '{redo_logs_included}'
              displayName: Redo logs included
            - key: controlfile_included
              pattern: '{controlfile_included}'
              displayName: Controlfile included
            - key: incremental_level
              pattern: '{incremental_level}'
              displayName: Incremental level
    - name: sql:com_dynatrace_extension_sql-oracle_host
      displayName: Oracle DB Server
      enabled: true
      rules:
        - idPattern: sql_sql-oracle_{device.address}
          instanceNamePattern: '{instance.host}'
          iconPattern: databaseserver
          sources:
            - sourceType: Metrics
              condition: $prefix(com.dynatrace.extension.sql-oracle)
          attributes:
            - pattern: '{device.address}'
              key: dt.ip_addresses
              displayName: IP Addresses
            - pattern: '{device.name}'
              key: dt.dns_names
              displayName: DNS names
            - pattern: '{device.port}'
              key: dt.listen_ports
              displayName: Listener ports
            # TODO: Re-introduce after 1.281
            # - pattern: 'ORACLE_DB:unknown:unknown'
            #   key: dt.software_techs
            #   displayName: Software Technologies
        - idPattern: sql_sql-oracle_{device.address}
          instanceNamePattern: '{instance.host}'
          iconPattern: databaseserver
          sources:
            - sourceType: Logs
          requiredDimensions:
            - key: dt.extension.name
              valuePattern: $eq(com.dynatrace.extension.sql-oracle)
    - name: sql:com_dynatrace_extension_sql-oracle_instance
      displayName: Oracle DB Instance
      enabled: true
      rules:
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}
          instanceNamePattern: '{instance.name}'
          iconPattern: oracle
          sources:
            - sourceType: Metrics
              condition: $eq(com.dynatrace.extension.sql-oracle.status)
          attributes:
            - pattern: '{device.port}'
              key: dt.listen_ports
              displayName: Listen ports
            - pattern: '{status}'
              key: status
              displayName: Status
            - pattern: '{parallel}'
              key: parallel
              displayName: Parallel
            - pattern: '{logins}'
              key: logins
              displayName: Logins
            - pattern: '{db.status}'
              key: db_status
              displayName: Database Status
            - pattern: '{instance.mode}'
              key: mode
              displayName: 'Instance Mode'
            - pattern: '{active_state}'
              key: active_state
              displayName: Active State
            - pattern: '{instance.role}'
              key: role
              displayName: 'Instance Role'
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}
          instanceNamePattern: '{instance.name}'
          iconPattern: oracle
          sources:
            - sourceType: Metrics
              condition: $eq(com.dynatrace.extension.sql-oracle.db_status)
          attributes:
            - pattern: '{instance.log_mode}'
              key: log_mode
              displayName: Log mode
            - pattern: '{instance.open_mode}'
              key: open_mode
              displayName: Open mode
            - pattern: '{instance.db_role}'
              key: db_role
              displayName: Database role
            - pattern: '{instance.flashback}'
              key: flashback
              displayName: Flashback
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}
          instanceNamePattern: '{instance.name}'
          iconPattern: oracle
          sources:
            - sourceType: Metrics
              condition: $prefix(com.dynatrace.extension.sql-oracle.pdb)
          requiredDimensions:
            - key: cdb.name
          attributes:
            - key: cdb
              pattern: '{cdb.name}'
              displayName: Container name
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}
          instanceNamePattern: '{instance.name}'
          iconPattern: oracle
          sources:
            - sourceType: Metrics
              condition: $prefix(com.dynatrace.extension.sql-oracle)
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}
          instanceNamePattern: '{instance.name}'
          iconPattern: oracle
          sources:
            - sourceType: Logs
          requiredDimensions:
            - key: dt.extension.name
              valuePattern: $eq(com.dynatrace.extension.sql-oracle)
    - name: sql:com_dynatrace_extension_sql-oracle_asm_disk
      displayName: Oracle ASM Disk
      enabled: true
      rules:
        - idPattern: sql_sql-oracle_asm_disk_{device.address}_{instance.name}_{name}
          instanceNamePattern: 'Disk {name} on {instance.name}'
          iconPattern: hdd-discdrive
          sources:
            - sourceType: Metrics
              condition: $prefix(com.dynatrace.extension.sql-oracle.asm.)
          attributes:
            - pattern: '{name}'
              key: disk_name
    - name: sql:com_dynatrace_extension_sql-oracle_database
      displayName: Oracle Database
      enabled: true
      rules:
        - idPattern: sql_sql-oracle_{device.address}_{instance.name}_{pdb.name}
          instanceNamePattern: '{pdb.name} on {instance.name}'
          iconPattern: oracledatabase
          sources:
            - sourceType: Metrics
              condition: $prefix(com.dynatrace.extension.sql-oracle.pdb)
          attributes:
            - key: connection_string
              pattern: "{device}"
              displayName: Connection string
            - pattern: "{pdb.name}"
              key: pdb
              displayName: PDB name
            - pattern: "{cdb.name}"
              key: cdb
              displayName: CDB name
            - pattern: "{pdb_open_mode}"
              key: open_mode
              displayName: Open mode
            - pattern: "{pdb_restricted}"
              key: restricted
            - pattern: "{pdb_last_changed_by}"
              key: last_changed_by
              displayName: Last changed by
            - pattern: "{pdb_open_time}"
              key: open_time
              displayName: Open time
  relationships:
    - fromType: sql:com_dynatrace_extension_sql-oracle_instance
      typeOfRelation: RUNS_ON
      toType: sql:com_dynatrace_extension_sql-oracle_host
      enabled: true
      sources:
        - sourceType: Metrics
          condition: $prefix(com.dynatrace.extension.sql-oracle)
        - sourceType: Logs
    - fromType: sql:com_dynatrace_extension_sql-oracle_host
      typeOfRelation: SAME_AS
      toType: host
      enabled: true
      sources:
        - sourceType: Entities
          mappingRules:
            - sourceProperty: dt.ip_addresses
              sourceTransformation: To lower case
              destinationProperty: ipAddress
              destinationTransformation: To lower case
    - fromType: sql:com_dynatrace_extension_sql-oracle_asm_disk
      typeOfRelation: CHILD_OF
      toType: sql:com_dynatrace_extension_sql-oracle_host
      enabled: true
      sources:
        - sourceType: Metrics
          condition: $prefix(com.dynatrace.extension.sql-oracle.asm.)
    - fromType: sql:com_dynatrace_extension_sql-oracle_backup_job
      typeOfRelation: RUNS_ON
      toType: sql:com_dynatrace_extension_sql-oracle_instance
      enabled: true
      sources:
        - sourceType: Metrics
          condition: $prefix(com.dynatrace.extension.sql-oracle.backup)
    - fromType: sql:com_dynatrace_extension_sql-oracle_database
      typeOfRelation: RUNS_ON
      toType: sql:com_dynatrace_extension_sql-oracle_instance
      enabled: true
      sources:
        - sourceType: Metrics
          condition: $prefix(com.dynatrace.extension.sql-oracle)

screens:
  - entityType: sql:com_dynatrace_extension_sql-oracle_host
    actions:
      - actionScope: GLOBAL_LIST
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
      - actionScope: GLOBAL_DETAILS
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
    propertiesCard:
      displayOnlyConfigured: false
      properties:
        - type: RELATION
          importantProperty: true
          relation:
            entitySelectorTemplate: type(host),toRelationships.isSameAs($(entityConditions))
            displayName: OneAgent Host
            fallbackMessage: No host deployed
    listSettings:
      staticContent:
        showGlobalFilter: true
        header:
          icon: databaseserver
          title: Oracle DB Servers
          description: List of all machines running Oracle DB Server
        hideDefaultBreadcrumb: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            type: NOOP
      layout:
        autoGenerate: false
        cards:
          - key: oracle_host-list-self
            type: ENTITIES_LIST
    detailsSettings:
      staticContent:
        showProblems: true
        showProperties: true
        showTags: true
        showGlobalFilter: true
        showAddTag: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            entityType: sql:com_dynatrace_extension_sql-oracle_host
            type: ENTITY_LIST_REF
      layout:
        autoGenerate: false
        cards:
          - key: oracle_host-list-instances
            type: ENTITIES_LIST
          - key: oracle_host-list-oneagent-processes
            type: ENTITIES_LIST
            conditions:
              - relatedEntity|entitySelectorTemplate=type(process_group_instance),processType("ORACLE_DB"),fromRelationships.isProcessOf(type(host),toRelationships.isSameAs($(entityConditions)))
    entitiesListCards:
      - key: oracle_host-list-self
        pageSize: 20
        displayName: Oracle DB Servers
        displayCharts: false
        enableDetailsExpandability: true
        numberOfVisibleCharts: 2
        displayIcons: true
        filtering:
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_host
                - type: ipAddress
                  displayName: IP address
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_host
        charts:
          - displayName: CPU usage
            detailedChart: true
            chartAsColumn: true
            visualizationType: GRAPH_CHART
            graphChartConfig:
              stacked: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.foregroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_host"):sum
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.backgroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_host"):sum
                  visualization:
                    seriesType: AREA
          - displayName: Memory usage
            detailedChart: true
            chartAsColumn: true
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.used:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_host"):sum
                  visualization:
                    seriesType: AREA
        columns:
          - type: RELATION
            relation:
              entitySelectorTemplate: type(host),toRelationships.isSameAs($(entityConditions))
              displayName: OneAgent Host
              fallbackMessage: Unmonitored
          - type: ATTRIBUTE
            attribute:
              key: dt.ip_addresses
              displayName: IP Address
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_instance),fromRelationships.runsOn($(entityConditions))
              displayName: Oracle Instance
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_database),fromRelationships.runsOn(type(sql:com_dynatrace_extension_sql-oracle_instance),fromRelationships.runsOn($(entityConditions)))
              displayName: Databases
              displayAmount: true
      - key: oracle_host-list-instances
        displayName: Oracle instances
        description: Oracle instances operating on this Oracle server
        entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_instance),fromRelationships.runsOn($(entityConditions))
        pageSize: 5
        displayCharts: false
        displayIcons: true
        enableDetailsExpandability: true
        numberOfVisibleCharts: 4
        hideEmptyCharts: true
        filtering:
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: db_status
                  displayName: Database status
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: status
                  displayName: Status
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: role
                  displayName: Instance Role
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: db_role
                  displayName: Database Role
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: open_mode
                  displayName: Open mode
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
        charts:
          - displayName: CPU usage
            detailedChart: true
            chartAsColumn: true
            visualizationType: GRAPH_CHART
            graphChartConfig:
              stacked: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.foregroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.backgroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  visualization:
                    seriesType: AREA
          - displayName: PGA Memory
            detailedChart: true
            chartAsColumn: true
            visualizationType: GRAPH_CHART
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.allocated:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.used:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.pga.usedForWorkAreas:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
          - displayName: SQL execution time
            visualizationType: GRAPH_CHART
            detailedChart: true
            chartAsColumn: false
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.sqlParse.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.plSqlExec.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.sqlExec.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
          - displayName: Sessions
            visualizationType: GRAPH_CHART
            detailedChart: true
            chartAsColumn: false
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.all:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                      seriesType: AREA
                      themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.active:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.userCalls.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: ROYALBLUE
        columns:
          - type: ATTRIBUTE
            attribute:
              key: status
              displayName: Status
          - type: ATTRIBUTE
            attribute:
              key: db_status
              displayName: Database status
          - type: ATTRIBUTE
            attribute:
              key: role
              displayName: Instance Role
          - type: ATTRIBUTE
            attribute:
              key: db_role
              displayName: Database Role
          - type: ATTRIBUTE
            attribute:
              key: open_mode
              displayName: Open mode
          - type: ATTRIBUTE
            attribute:
              key: cdb
              displayName: CDB
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_database),fromRelationships.runsOn($(entityConditions))
              displayName: Databases
              displayAmount: true
      - key: oracle_host-list-oneagent-processes
        displayName: OneAgent monitored processes
        description: Performance data provided by the OneAgent for Oracle processes
        pageSize: 5
        displayCharts: true
        displayIcons: true
        enableDetailsExpandability: true
        numberOfVisibleCharts: 2
        entitySelectorTemplate: type(process_group_instance),processType("ORACLE_DB"),fromRelationships.isProcessOf(type(host),toRelationships.isSameAs($(entityConditions)))
        charts:
          - displayName: CPU Usage
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.cpu.usage:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
          - displayName: Memory Usage
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.mem.workingSetSize:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
          - displayName: Traffic
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.network.traffic.traffic:splitBy("dt.entity.process_group_instance")
                  visualization:
                      themeColor: BLUE
          - displayName: Retransmissions
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.network.packets.retransmission:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
          - displayName: Connectivity
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.network.sessions.connectivity:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
          - displayName: File descriptors
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.handles.fileDescriptorsPercentUsed:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
          - displayName: I/O
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.io.bytesWritten:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
                - metricSelector: builtin:tech.generic.io.bytesRead:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: ORANGE
          - displayName: Network I/O
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.network.bytesRx:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
                - metricSelector: builtin:tech.generic.network.bytesTx:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: ORANGE
          - displayName: Worker processes
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: builtin:tech.generic.processCount:splitBy("dt.entity.process_group_instance")
                  visualization:
                    themeColor: BLUE
        columns:
          - type: ATTRIBUTE
            attribute:
              key: softwareTechnologies
              displayName: Software technology
  - entityType: sql:com_dynatrace_extension_sql-oracle_instance
    target: BOTH
    actions:
      - actionScope: GLOBAL_LIST
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
      - actionScope: GLOBAL_DETAILS
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
    listSettings:
      staticContent:
        showGlobalFilter: true
        header:
          title: Oracle DB Instances
          description: Overview of all Oracle Instances detected through extension monitoring
          icon: oracle
        hideDefaultBreadcrumb: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            entityType: sql:com_dynatrace_extension_sql-oracle_host
            type: ENTITY_LIST_REF
          - displayName: Instances
            type: NOOP
      layout:
        autoGenerate: false
        cards:
          - key: oracle_instance-list-self
            type: ENTITIES_LIST
    propertiesCard:
      displayOnlyConfigured: false
      target: BOTH
      dqlQuery:
        query: >
          fetch `dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`
          | fields {
              id, entity.name, dt.listen_ports, status, cdb, parallel, logins, db_status, mode, active_state, role, log_mode, open_mode, db_role, flashback,
              runsOn=runs_on[`dt.entity.sql:com_dynatrace_extension_sql-oracle_host`]
            }
          | filter id==$(entityId)
        lookups:
          - query: >
              fetch `dt.entity.sql:com_dynatrace_extension_sql-oracle_host`
              | fields id, entity.name, oracleHost = record(entityId=id, displayName=entity.name, dim="dt.entity.sql:com_dynatrace_extension_sql-oracle_host")
            sourceField: runsOn
            lookupField: id
            fields:
              - oracleHost
      properties:
        - type: DQL
          importantProperty: true
          dql:
            field: oracleHost
            displayName: Oracle DB Server
        - type: DQL
          dql:
            field: entity.name
            displayName: Name
        - type: DQL
          dql:
            field: dt.listen_ports
            displayName: Listen ports
        - type: DQL
          importantProperty: true
          dql:
            field: status
            displayName: Status
        - type: DQL
          dql:
            field: parallel
            displayName: Parallel
        - type: DQL
          dql:
            field: logins
            displayName: Logins
        - type: DQL
          dql:
            field: db_status
            displayName: Database status
        - type: DQL
          dql:
            field: mode
            displayName: Instance mode
        - type: DQL
          dql:
            field: active_state
            displayName: Active state
        - type: DQL
          dql:
            field: role
            displayName: Instance role
        - type: DQL
          dql:
            field: log_mode
            displayName: Log mode
        - type: DQL
          importantProperty: true
          dql:
            field: open_mode
            displayName: Open mode
        - type: DQL
          dql:
            field: db_role
            displayName: Database role
        - type: DQL
          dql:
            field: flashback
            displayName: Flashback
        - type: DQL
          dql:
            field: cdb
            displayName: CDB
        - type: RELATION
          importantProperty: true
          relation:
            entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_host),toRelationships.runsOn($(entityConditions))
            displayName: Oracle DB Server
        - type: ATTRIBUTE
          importantProperty: true
          attribute:
            key: status
            displayName: Status
        - type: ATTRIBUTE
          importantProperty: true
          attribute:
            key: open_mode
            displayName: Open mode
    detailsSettings:
      staticContent:
        showProblems: true
        showProperties: true
        showTags: true
        showGlobalFilter: true
        showAddTag: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            entityType: sql:com_dynatrace_extension_sql-oracle_host
            type: ENTITY_LIST_REF
          - displayName: Instances
            entityType: sql:com_dynatrace_extension_sql-oracle_instance
            type: ENTITY_LIST_REF
      layout:
        autoGenerate: false
        cards:
          - key: oracle_instance-list-databases
            type: ENTITIES_LIST
          - key: oracle_instance-list-backup_jobs
            type: ENTITIES_LIST
            conditions:
              - metricAvailable|metric=com.dynatrace.extension.sql-oracle.backup-elapsed_seconds:count:filter(in("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance", entitySelector("entityId($(entityId))")))|lastWrittenWithinDays=30
          - key: instance-charts-cpu
            type: CHART_GROUP
          - key: instance-charts-memory-gen2
            type: CHART_GROUP
          - key: instance-charts-memory-gen3
            type: CHART_GROUP
          - key: instance-charts-query_performance
            type: CHART_GROUP
          - key: instance-charts-io
            type: CHART_GROUP
          - key: instance-tablespaces-gen3
            type: CHART_GROUP
          - key: instance-charts-sessions-gen2
            type: CHART_GROUP
          - key: instance-charts-sessions-gen3
            type: CHART_GROUP
          - key: instance-table-tablespace
            type: METRIC_TABLE
          - type: LOGS
            key: default
            width: FULL_SIZE
    entitiesListCards:
      - key: oracle_instance-list-self
        pageSize: 20
        displayName: Oracle DB Instances
        displayCharts: false
        enableDetailsExpandability: true
        numberOfVisibleCharts: 4
        displayIcons: true
        hideEmptyCharts: true
        filtering:
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: db_status
                  displayName: Database status
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: status
                  displayName: Status
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: role
                  displayName: Instance Role
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: db_role
                  displayName: Database Role
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
                - type: open_mode
                  displayName: Open mode
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
        charts:
          - displayName: CPU usage
            detailedChart: true
            chartAsColumn: true
            visualizationType: GRAPH_CHART
            graphChartConfig:
              stacked: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.foregroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.backgroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  visualization:
                    seriesType: AREA
          - displayName: PGA Memory
            detailedChart: true
            chartAsColumn: true
            visualizationType: GRAPH_CHART
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.allocated:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.used:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.pga.usedForWorkAreas:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
          - displayName: SQL execution time
            visualizationType: GRAPH_CHART
            detailedChart: true
            chartAsColumn: false
            graphChartConfig:
              stacked: true
              visualization:
                seriesType: AREA
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.sqlParse.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.plSqlExec.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.sqlExec.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
          - displayName: Sessions
            visualizationType: GRAPH_CHART
            detailedChart: true
            chartAsColumn: false
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.all:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                      seriesType: AREA
                      themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.active:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.userCalls.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
        columns:
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_host),toRelationships.runsOn($(entityConditions))
              displayName: Oracle Server
          - type: RELATION
            relation:
              entitySelectorTemplate: type(host),toRelationships.isSameAs(type(sql:com_dynatrace_extension_sql-oracle_host),toRelationships.runsOn($(entityConditions)))
              displayName: OneAgent Host
              fallbackMessage: Unmonitored
          - type: ATTRIBUTE
            attribute:
              key: status
              displayName: Status
          - type: ATTRIBUTE
            attribute:
              key: db_status
              displayName: Database status
          - type: ATTRIBUTE
            attribute:
              key: role
              displayName: Instance role
          - type: ATTRIBUTE
            attribute:
              key: db_role
              displayName: Database role
          - type: ATTRIBUTE
            attribute:
              key: open_mode
              displayName: Open mode
      - key: oracle_instance-list-backup_jobs
        displayName: Backup jobs
        displayIcons: true
        pageSize: 10
        displayCharts: true
        enableDetailsExpandability: false
        numberOfVisibleCharts: 1
        description: Backup jobs are detected once they have finished and may register up to 5 datapoints
        entitySelectorTemplate: type(dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job),fromRelationships.runsOn($(entityConditions))
        emptyState:
          header: No backup jobs detected
          body: Try changing your timeframe
        initialSorting:
          columnId: attribute-start_time
          order: DESCENDING
        filtering:
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_backup_job
                - type: backup_status
                  displayName: Backup Status
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_backup_job
                - type: input_type
                  displayName: Input Type
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_backup_job
        charts:
          - displayName: Job status
            visualizationType: GRAPH_CHART
            chartAsColumn: false
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                  min: "0"
                  max: "1"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.backup.state:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job", "backup_status"):count:splitBy("backup_status"):count
                  yAxisKey: left
                  visualization:
                    displayName: Job detected
                    seriesType: COLUMN
                    themeColor: BLUE
                    colorOverride:
                      - color: "#c41425"
                        seriesName: FAILED
                      - color: "#2ab06f"
                        seriesName: COMPLETED
        columns:
          - type: ATTRIBUTE
            attribute:
              key: input_type
              displayName: Input Type
          - type: ATTRIBUTE
            attribute:
              key: backup_status
              displayName: Backup Status
          - type: ATTRIBUTE
            attribute:
              key: start_time
              displayName: Start time
          - type: ATTRIBUTE
            attribute:
              key: end_time
              displayName: End time
          - type: ATTRIBUTE
            attribute:
              key: incremental_level
              displayName: Incremental level
          - type: ATTRIBUTE
            attribute:
              key: backup_types
              displayName: Backup types
          - type: ATTRIBUTE
            attribute:
              key: controfile_included
              displayName: Controlfile included
      - key: oracle_instance-list-databases
        pageSize: 5
        displayName: Databases on this instance
        displayCharts: false
        enableDetailsExpandability: false
        numberOfVisibleCharts: 0
        hideEmptyCharts: true
        displayIcons: true
        entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_database),fromRelationships.runsOn($(entityConditions))
        charts: []
        filtering:
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_database
                - type: open_mode
                  displayName: Open mode
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_database
        columns:
          - type: ATTRIBUTE
            attribute:
              key:  open_mode
              displayName: Open mode
          - type: ATTRIBUTE
            attribute:
              key: pdb
              displayName: PDB
          - type: ATTRIBUTE
            attribute:
              key: cdb
              displayName: CDB
    logsCards:
      - displayName: Logs
        target: BOTH
        enablePaging: true
        key: default
        pageSize: 10
        showFiltering: true
        displayChart: true
    chartsCards:
      - key: instance-charts-cpu
        target: BOTH
        displayName: CPU
        numberOfVisibleCharts: 2
        mode: NORMAL
        charts:
          - displayName: CPU cores
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              showSparkline: false
              showTrend: false
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.cpu.cores:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                dqlQuery: >
                  timeseries cores = avg(`com.dynatrace.extension.sql-oracle.cpu.cores`),
                    by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                    filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
          - displayName: CPU usage
            visualizationType: GRAPH_CHART
            graphChartConfig:
              stacked: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.foregroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.cpu.foregroundTotal`),
                      by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.cpu.backgroundTotal:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.cpu.backgroundTotal`),
                      by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
      - key: instance-charts-memory-gen2
        target: CLASSIC
        displayName: Memory
        numberOfVisibleCharts: 6
        chartsInRow: 3
        mode: NORMAL
        charts:
          - displayName: PGA Memory
            visualizationType: GRAPH_CHART
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.allocated:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.allocated`),
                      by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.used:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.used`),
                      by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.pga.usedForWorkAreas:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        pgaused = avg(`com.dynatrace.extension.sql-oracle.memory.pga.used`),
                        pgaallocated = avg(`com.dynatrace.extension.sql-oracle.memory.pga.allocated`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd usedForWorkAreas=100*pgaused[]/pgaallocated[]
                    | fieldsRemove pgaused, pgaallocated
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
          - displayName: PGA Target vs. Limit
            visualizationType: GRAPH_CHART
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.pga.size.targetToLimitRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        pgaAggregateTarget = avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget`),
                        pgaAggregateLimit = avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd targetToLimitRatio=pgaAggregateTarget[]/pgaAggregateLimit[]*100
                    | fieldsRemove pgaAggregateTarget, pgaAggregateLimit
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
              connectGaps: true
          - displayName: Sorts in memory
            visualizationType: GRAPH_CHART
            graphChartConfig:
              stacked: true
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.memorySorts.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.memorySorts.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: PURPLE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.diskSorts.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.diskSorts.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.sortsInMemory:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        memorySorts = avg(`com.dynatrace.extension.sql-oracle.memory.memorySorts.count`),
                        diskSorts = avg(`com.dynatrace.extension.sql-oracle.memory.diskSorts.count`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd sortsInMemory=100*memorySorts[]/(memorySorts[]+diskSorts[])
                    | fieldsRemove memorySorts, diskSorts
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
              connectGaps: true
          - displayName: "Buffer cache hit"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.bufferCacheHitRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        sessionLogicalReads = avg(`com.dynatrace.extension.sql-oracle.memory.sessionLogicalReads.count`),
                        physicalReads = avg(`com.dynatrace.extension.sql-oracle.memory.physicalReads.count`),
                        physicalReadsDirect = avg(`com.dynatrace.extension.sql-oracle.memory.physicalReadsDirect.count`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd bufferCacheHitRatio=100*(sessionLogicalReads[]-physicalReads[]-physicalReadsDirect[])/sessionLogicalReads[]
                    | fieldsRemove sessionLogicalReads, physicalReads, physicalReadsDirect
              connectGaps: true
          - displayName: "Shared pool free"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.cacheBuffer.sharedPoolFree:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.cacheBuffer.sharedPoolFree`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
          - displayName: Redo writes
            visualizationType: GRAPH_CHART
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoSizeIncrease.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoSizeIncrease.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: COLUMN
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoWriteTime.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoWriteTime.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
          - displayName: "Redo log space wait time"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoLogSpaceWaitTime.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoLogSpaceWaitTime.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
      - key: instance-charts-memory-gen3
        target: PLATFORM
        displayName: Memory
        numberOfVisibleCharts: 6
        chartsInRow: 3
        mode: NORMAL
        charts:
          - displayName: PGA Memory
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.allocated:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.allocated`),
                      by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: TURQUOISE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.used:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.used`),
                      by: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
          - displayName: PGA used for work areas
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.pga.usedForWorkAreas:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        pgaused = avg(`com.dynatrace.extension.sql-oracle.memory.pga.used`),
                        pgaallocated = avg(`com.dynatrace.extension.sql-oracle.memory.pga.allocated`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd usedForWorkAreas=100*pgaused[]/pgaallocated[]
                    | fieldsRemove pgaused, pgaallocated
          - displayName: PGA Target vs. Limit
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: TURQUOISE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
          - displayName: PGA target to limit ratio
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.pga.size.targetToLimitRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        pgaAggregateTarget = avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateTarget`),
                        pgaAggregateLimit = avg(`com.dynatrace.extension.sql-oracle.memory.pga.size.pgaAggregateLimit`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter: {`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd targetToLimitRatio=pgaAggregateTarget[]/pgaAggregateLimit[]*100
                    | fieldsRemove pgaAggregateTarget, pgaAggregateLimit
              connectGaps: true
          - displayName: Sorts (memory vs. disk)
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.memorySorts.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.memorySorts.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: PURPLE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.diskSorts.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.diskSorts.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
          - displayName: Percentage sorts in memory
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.sortsInMemory:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        memorySorts = avg(`com.dynatrace.extension.sql-oracle.memory.memorySorts.count`),
                        diskSorts = avg(`com.dynatrace.extension.sql-oracle.memory.diskSorts.count`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd sortsInMemory=100*memorySorts[]/(memorySorts[]+diskSorts[])
                    | fieldsRemove memorySorts, diskSorts
              connectGaps: true
          - displayName: "Buffer cache hit"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.memory.bufferCacheHitRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        sessionLogicalReads = avg(`com.dynatrace.extension.sql-oracle.memory.sessionLogicalReads.count`),
                        physicalReads = avg(`com.dynatrace.extension.sql-oracle.memory.physicalReads.count`),
                        physicalReadsDirect = avg(`com.dynatrace.extension.sql-oracle.memory.physicalReadsDirect.count`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd bufferCacheHitRatio=100*(sessionLogicalReads[]-physicalReads[]-physicalReadsDirect[])/sessionLogicalReads[]
                    | fieldsRemove sessionLogicalReads, physicalReads, physicalReadsDirect
              connectGaps: true
          - displayName: "Shared pool free"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.cacheBuffer.sharedPoolFree:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.cacheBuffer.sharedPoolFree`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
          - displayName: Redo writes
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoSizeIncrease.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoSizeIncrease.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: LINE
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoWriteTime.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoWriteTime.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: COLUMN
                    themeColor: TURQUOISE
          - displayName: "Redo log space wait time"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoLogSpaceWaitTime.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.memory.sga.redoBuffer.redoLogSpaceWaitTime.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
      - key: instance-charts-query_performance
        target: BOTH
        displayName: Query performance
        numberOfVisibleCharts: 4
        mode: NORMAL
        charts:
          - displayName: Database load
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.dbTime.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.queries.dbTime.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.cpuTime.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.queries.cpuTime.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
          - displayName: SQL execution time
            visualizationType: GRAPH_CHART
            graphChartConfig:
              stacked: true
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.sqlParse.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.queries.sqlParse.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.plSqlExec.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.queries.plSqlExec.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.sqlExec.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.queries.sqlExec.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
          - displayName: Connection management time
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.queries.connectionManagement.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.queries.connectionManagement.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
          - displayName: "Time spent on other activities"
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.queries.other:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        dbTime = avg(`com.dynatrace.extension.sql-oracle.queries.dbTime.count`),
                        plSqlExec = avg(`com.dynatrace.extension.sql-oracle.queries.plSqlExec.count`),
                        sqlExec = avg(`com.dynatrace.extension.sql-oracle.queries.sqlExec.count`),
                        sqlParse = avg(`com.dynatrace.extension.sql-oracle.queries.sqlParse.count`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd queriesOther=dbTime[] - plSqlExec[] - sqlExec[] - sqlParse[]
                    | fieldsRemove dbTime, plSqlExec, sqlExec, sqlParse
      - key: instance-charts-io
        target: BOTH
        displayName: I/O
        numberOfVisibleCharts: 2
        mode: NORMAL
        charts:
          - displayName: Physical read/write bytes
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.io.bytesRead.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.io.bytesRead.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                - metricSelector: com.dynatrace.extension.sql-oracle.io.bytesWritten.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.io.bytesWritten.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
          - displayName: Total wait time
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.io.wait.count:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.io.wait.count`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
      - key: instance-tablespaces-gen3
        target: PLATFORM
        displayName: Tablespaces
        numberOfVisibleCharts: 2
        mode: NORMAL
        charts:
          - displayName: Used & free space
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.tablespaces.usedSpaceRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.tablespaces.usedSpaceRatio`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                - metricSelector: com.dynatrace.extension.sql-oracle.tablespaces.freeSpaceRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.tablespaces.freeSpaceRatio`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
              connectGaps: true
          - displayName: Total & free space
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.tablespaces.totalSpace:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.tablespaces.totalSpace`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                - metricSelector: com.dynatrace.extension.sql-oracle.tablespaces.freeSpace:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.tablespaces.freeSpace`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
              connectGaps: true
      - key: instance-charts-sessions-gen2
        target: CLASSIC
        displayName: "Sessions"
        numberOfVisibleCharts: 2
        mode: "NORMAL"
        charts:
          - displayName: Total vs. active
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.all:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.sessions.all`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.active:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.sessions.active`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
          - displayName: Total vs. limit
            visualizationType: GRAPH_CHART
            graphChartConfig:
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.limits.sessions:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.limits.sessions`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.all:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.sessions.all`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: func:com.dynatrace.extension.sql-oracle.sessions.totalSessionsToLimitRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        allSessions = avg(`com.dynatrace.extension.sql-oracle.sessions.all`),
                        limit = avg(`com.dynatrace.extension.sql-oracle.limits.sessions`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd sessionsToLimitRatio = allSessions[]/limit[]*100
                    | fieldsRemove allSessions, limit
                  yAxisKey: right
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
      - key: instance-charts-sessions-gen3
        target: PLATFORM
        displayName: "Sessions"
        numberOfVisibleCharts: 2
        mode: "NORMAL"
        charts:
          - displayName: Total vs. active
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.all:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.sessions.all`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.active:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.sessions.active`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: GREEN
          - displayName: Total vs. limit
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.limits.sessions:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.limits.sessions`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.sessions.all:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries avg(`com.dynatrace.extension.sql-oracle.sessions.all`),
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
          - displayName: Sessions to limit ratio
            visualizationType: GRAPH_CHART
            graphChartConfig:
              metrics:
                - metricSelector: func:com.dynatrace.extension.sql-oracle.sessions.totalSessionsToLimitRatio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_instance")
                  dqlQuery: >
                    timeseries {
                        allSessions = avg(`com.dynatrace.extension.sql-oracle.sessions.all`),
                        limit = avg(`com.dynatrace.extension.sql-oracle.limits.sessions`)
                      },
                      by:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance`},
                      filter:{`dt.entity.sql:com_dynatrace_extension_sql-oracle_instance` == $(entityId)}
                    | fieldsAdd sessionsToLimitRatio = allSessions[]/limit[]*100
                    | fieldsRemove allSessions, limit
                  visualization:
                    seriesType: LINE
                    themeColor: DEFAULT
    metricTableCards:
      - key: instance-table-tablespace
        displayName: Tablespaces
        pageSize: 5
        displayCharts: true
        enableDetailsExpandability: true
        numberOfVisibleCharts: 1
        initialSorting:
          columnId: metric-Used space ratio
          order: DESCENDING
        charts:
          - displayName: Tablespace usage
            visualizationType: GRAPH_CHART
            graphChartConfig:
              connectGaps: true
              yAxes:
                - key: left
                  position: LEFT
                  visible: true
                - key: right
                  position: RIGHT
                  visible: true
                  min: "0"
                  max: "100"
              metrics:
                - metricSelector: com.dynatrace.extension.sql-oracle.tablespaces.totalSpace:splitBy()
                  metricSelectorSort: com.dynatrace.extension.sql-oracle.tablespaces.totalSpace$(entityFilter)$(userFilter):splitBy("tablespace"):avg$(aggregation):last:sort(value(avg, $(sortOrder))):names
                  metricSelectorDetailed: com.dynatrace.extension.sql-oracle.tablespaces.totalSpace$(entityFilter)$(userFilter):splitBy("tablespace")$(aggregation)
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: BLUE
                - metricSelector: com.dynatrace.extension.sql-oracle.tablespaces.usedSpace:splitBy()
                  metricSelectorSort: com.dynatrace.extension.sql-oracle.tablespaces.usedSpace$(entityFilter)$(userFilter):splitBy("tablespace"):avg$(aggregation):last:sort(value(avg, $(sortOrder))):names
                  metricSelectorDetailed: com.dynatrace.extension.sql-oracle.tablespaces.usedSpace$(entityFilter)$(userFilter):splitBy("tablespace")$(aggregation)
                  yAxisKey: left
                  visualization:
                    seriesType: AREA
                    themeColor: ORANGE
                - metricSelector: (((com.dynatrace.extension.sql-oracle.tablespaces.usedSpace:splitBy()) / (com.dynatrace.extension.sql-oracle.tablespaces.totalSpace:splitBy())) * (100)):setUnit(Percent)
                  metricSelectorSort: com.dynatrace.extension.sql-oracle.tablespaces.usedSpaceRatio$(entityFilter)$(userFilter):splitBy("tablespace"):avg$(aggregation):last:sort(value(avg, $(sortOrder))):names
                  metricSelectorDetailed: com.dynatrace.extension.sql-oracle.tablespaces.usedSpaceRatio$(entityFilter)$(userFilter):splitBy("tablespace")$(aggregation)
                  yAxisKey: right
                  visualization:
                    displayName: Used %
                    seriesType: LINE
                    themeColor: DEFAULT
  - entityType: sql:com_dynatrace_extension_sql-oracle_database
    actions:
      - actionScope: GLOBAL_LIST
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
      - actionScope: GLOBAL_DETAILS
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
    listSettings:
      staticContent:
        showGlobalFilter: true
        header:
          title: Oracle Databases
          description: Overview of all Oracle Databases (standalone and pluggable) monitored with the extension
          icon: oracledatabase
        hideDefaultBreadcrumb: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_host
          - displayName: Instances
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_instance
          - displayName: Databases
            type: NOOP
      layout:
        autoGenerate: false
        cards:
          - key: database-list-self
            type: ENTITIES_LIST
    propertiesCard:
      displayOnlyConfigured: false
      properties:
        - type: RELATION
          importantProperty: true
          relation:
            entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions))
            displayName: Oracle Instance
        - type: RELATION
          relation:
            entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_host),toRelationships.runsOn(type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions)))
            displayName: Oracle Server
        - type: ATTRIBUTE
          importantProperty: true
          attribute:
            key: open_mode
            displayName: Open mode
        - type: ATTRIBUTE
          importantProperty: true
          attribute:
            key: cdb
            displayName: CDB
    detailsSettings:
      staticContent:
        showProblems: true
        showProperties: true
        showTags: true
        showGlobalFilter: true
        showAddTag: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_host
          - displayName: Instances
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_instance
          - displayName: Databases
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_database
      layout:
        autoGenerate: false
        cards:
          - key: database-chart-params
            type: CHART_GROUP
          - key: database-chart-size
            type: CHART_GROUP
    chartsCards:
      - key: database-chart-size
        displayName: Database size
        mode: NORMAL
        numberOfVisibleCharts: 4
        charts:
        - displayName: Total size
          visualizationType: GRAPH_CHART
          graphChartConfig:
            metrics:
              - metricSelector: com.dynatrace.extension.sql-oracle.pdb-total_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
        - displayName: Block size
          visualizationType: GRAPH_CHART
          graphChartConfig:
            metrics:
              - metricSelector: com.dynatrace.extension.sql-oracle.pdb-block_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
        - displayName: Diagnostic size
          visualizationType: GRAPH_CHART
          graphChartConfig:
            metrics:
              - metricSelector: com.dynatrace.extension.sql-oracle.pdb-diagnostic_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
        - displayName: Audit files size
          visualizationType: GRAPH_CHART
          graphChartConfig:
            metrics:
              - metricSelector: com.dynatrace.extension.sql-oracle.pdb-audit_files_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
      - key: database-chart-params
        displayName: Database size parameters
        mode: NORMAL
        numberOfVisibleCharts: 3
        charts:
          - displayName: Max size
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.pdb-max_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
          - displayName: Max diagnostic size
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.pdb-max_diagnostic_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
          - displayName: Max audit size
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.pdb-max_audit_size:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_database")
    entitiesListCards:
      - key: database-list-self
        pageSize: 20
        displayCharts: false
        enableDetailsExpandability: true
        numberOfVisibleCharts: 2
        displayIcons: true
        filtering:
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_database
                - type: open_mode
                  displayName: Open mode
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_database
        columns:
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions))
              displayName: Oracle Instance
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_host),toRelationships.runsOn(type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions)))
              displayName: Oracle Server
          - type: ATTRIBUTE
            attribute:
              key:  open_mode
              displayName: Open mode
          - type: ATTRIBUTE
            attribute:
              key: cdb
              displayName: CDB
  - entityType: sql:com_dynatrace_extension_sql-oracle_backup_job
    actions:
      - actionScope: GLOBAL_LIST
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
      - actionScope: GLOBAL_DETAILS
        actions:
          - actionExpression: hubExtension|extensionId=com.dynatrace.extension.sql-oracle|text=configure
            visualization:
              iconOnly: false
              icon: options-menu
              displayName: Configure extension
    propertiesCard:
      displayOnlyConfigured: false
      properties:
        - type: RELATION
          importantProperty: true
          relation:
            entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions))
            displayName: Oracle Instance
        - type: ATTRIBUTE
          importantProperty: true
          attribute:
            key: input_type
            displayName: Type
        - type: ATTRIBUTE
          importantProperty: true
          attribute:
            key: backup_status
            displayName: Status
    listSettings:
      staticContent:
        showGlobalFilter: true
        header:
          title: Backup jobs
          description: Overview of all backup jobs detected across all monitored Oracle Instances
          icon: backup
        hideDefaultBreadcrumb: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_host
          - displayName: Instances
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_instance
          - displayName: Backup jobs
            type: NOOP
      layout:
        autoGenerate: false
        cards:
          - key: backup_job-list-self
            type: ENTITIES_LIST
    detailsSettings:
      staticContent:
        showProblems: true
        showProperties: true
        showTags: true
        showGlobalFilter: true
        showAddTag: true
        breadcrumbs:
          - displayName: Oracle
            type: NOOP
          - displayName: Servers
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_host
          - displayName: Instances
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_instance
          - displayName: Backup jobs
            type: ENTITY_LIST_REF
            entityType: sql:com_dynatrace_extension_sql-oracle_backup_job
      layout:
        autoGenerate: false
        cards:
          - key: backup_job-chart-details
            type: CHART_GROUP
          - key: backup_job-chart-io
            type: CHART_GROUP
    entitiesListCards:
      - key: backup_job-list-self
        displayName: Backup jobs
        pageSize: 20
        displayCharts: false
        enableDetailsExpandability: true
        numberOfVisibleCharts: 2
        displayIcons: true
        filtering:
          relationships:
            - type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions))
          entityFilters:
            - displayName: Filter by
              filters:
                - type: entityName
                  displayName: Name
                  freeText: true
                  modifier: contains
                  defaultSearch: true
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_backup_job
                - type: backup_status
                  displayName: Backup Status
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_backup_job
                - type: input_type
                  displayName: Input Type
                  freeText: true
                  modifier: contains
                  defaultSearch: false
                  distinct: false
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_backup_job
            - displayName: Related entity filters
              filters:
                - type: entityName
                  displayName: Instance Name
                  freeText: true
                  modifier: equals
                  defaultSearch: false
                  distinct: true
                  entityTypes:
                    - sql:com_dynatrace_extension_sql-oracle_instance
        columns:
          - type: RELATION
            relation:
              entitySelectorTemplate: type(sql:com_dynatrace_extension_sql-oracle_instance),toRelationships.runsOn($(entityConditions))
              displayName: Oracle Instance
          - type: ATTRIBUTE
            attribute:
              key: input_type
              displayName: Input Type
          - type: ATTRIBUTE
            attribute:
              key: backup_status
              displayName: Backup Status
          - type: ATTRIBUTE
            attribute:
              key: start_time
              displayName: Start time
          - type: ATTRIBUTE
            attribute:
              key: end_time
              displayName: End time
          - type: ATTRIBUTE
            attribute:
              key: datafiles_included
              displayName: Datafiles included
          - type: ATTRIBUTE
            attribute:
              key: redo_logs_included
              displayName: Redo Logs included
          - type: ATTRIBUTE
            attribute:
              key: controfile_included
              displayName: Controlfile included
          - type: ATTRIBUTE
            attribute:
              key: incremental_level
              displayName: Incremental level
    messageCards:
      - key: backup_job-message-fail
        type: MESSAGE
        message:
          text: This backup job failed
          theme: ERROR
      - key: backup_job-message-success
        type: MESSAGE
        message:
          text: This backup job was successful
          theme: INFO
    chartsCards:
      - key: backup_job-chart-details
        displayName: Job details
        numberOfVisibleCharts: 3
        chartsInRow: 3
        mode: NORMAL
        charts:
          - displayName: Duration
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-elapsed_seconds:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job")
          - displayName: Compression ratio
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-compression_ratio:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job")
          - displayName: Auto-backup count
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-autobackup_count_number:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job")
      - key: backup_job-chart-io
        displayName: "I/O"
        numberOfVisibleCharts: 4
        chartsInRow: 4
        mode: "NORMAL"
        charts:
          - displayName: "Input bytes"
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-input_bytes:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job"):avg
          - displayName: "Output bytes"
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-output_bytes:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job"):avg
          - displayName: "Input bytes per second"
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-input_bytes_per_second:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job"):avg
          - displayName: "Output bytes per second"
            visualizationType: SINGLE_VALUE
            singleValueConfig:
              foldTransformation: LAST_VALUE
              metric:
                metricSelector: com.dynatrace.extension.sql-oracle.backup-output_bytes_per_second:splitBy("dt.entity.sql:com_dynatrace_extension_sql-oracle_backup_job"):avg
